#!/bin/bash

TRUE=1
FALSE=0

ig_generated_package_name="package.r4.tgz"
home_directory=$PWD
ig_builder_output_path="${home_directory}/output"
package_path="${home_directory}/package"
working_path="${package_path}/working"

echo "ig builder output path: ${ig_builder_output_path}"
echo "Working directory: ${working_path}"
echo "Package output directory: ${output_path}"

PrepareDirectories ()
{
  local ERROR=$FALSE
  echo "Recreating package output location"

  if [[ -d "${package_path}" ]]
  then
    removed=`rm -f -v -r "${package_path}" 2>&1` || ERROR=$TRUE
    if [[ ${ERROR} -eq ${TRUE} ]]; then
      echo "ERROR: Cannot remove files in working directory"
      echo -e "---------------------------\n${removed}\n------------------------------"
      exit 1
    fi
  fi

  created=`mkdir -p "${working_path}" 2>&1`|| ERROR=$TRUE
  if [[ ${ERROR} -eq ${TRUE} ]]; then
    echo "ERROR: Working directory '${working_path}' could not be recreated"
    echo -e "--------------------------- \n${created}\n---------------------------------"
    exit 1
  fi

  created=`mkdir -p "${package_output_path}" 2>&1`|| ERROR=$TRUE
  if [[ ${ERROR} -eq ${TRUE} ]]; then
    echo "ERROR: Package output direcory '${package_output_path}' could not be recreated"
    echo -e "--------------------------- \n${created}\n---------------------------------"
    exit 1
  fi

  created=`mkdir -p "${example_output_path}" 2>&1`|| ERROR=$TRUE
  if [[ ${ERROR} -eq ${TRUE} ]]; then
    echo "ERROR: Working directory '${example_output_path}' could not be recreated"
    echo -e "--------------------------- \n${created}\n---------------------------------"
    exit 1
  fi

}

CopyProfileFiles ()
{
  echo "Copying profile files"

  local ERROR=$FALSE
  local package_export_path="${working_path}/package"
  local FILES=`ls "${package_export_path}" | grep --exclude-dir={xml,other} --include=*.json '\StructureDefinition\|package'`

  for name in ${FILES[@]}
  do
    source="${package_export_path}/${name}"
    destination="${package_output_path}/${name}"
    echo "source:" $source
    echo "destination:" $destination
    succes=`cp "${source}" "${destination}" 2>&1` || ERROR=$TRUE
    if [[ ${ERROR} -eq ${TRUE} ]]; then
      echo "ERROR: Unable to copy profile files to target archive directory, exiting"
      echo -e "--------------------------- \n${succes}\n---------------------------------"
      exit 1
    fi
  done
}

CopyExampleFiles()
{
  echo "Copying example files"
  local ERROR=$FALSE
  local package_export_path="${working_path}/package"
  local FILES=`ls "${package_export_path}" | grep --include=*.json -v '\StructureDefinition\|package\|Parameters\|Implementation\|xml\|other'`

  for name in ${FILES[@]}
  do
    source="${package_export_path}/${name}"
    destination="${example_output_path}/${name}"
    echo "source:" $source
    echo "destination:" $destination
    succes=`cp "${source}" "${destination}" 2>&1` || ERROR=$TRUE
    if [[ ${ERROR} -eq ${TRUE} ]]; then
      echo "ERROR: Unable to copy example files to target archive directory, exiting"
      echo -e "--------------------------- \n${succes}\n---------------------------------"
      exit 1
    fi
  done
}

UnpackTarFile()
{
  local ERROR=$FALSE

  local source_package_file="${ig_builder_output_path}/${ig_generated_package_name}"
  echo "package file name: ${source_package_file}"
  [[ ! -f "${source_package_file}" ]] && echo "Package file '${ig_generated_package_name}' not found in IG output folder" && exit 1

  local result=`tar -xvzf "${source_package_file}" -C "${working_path}" 2>&1` || ERROR=$TRUE
  if [[ $ERROR -eq $TRUE ]]; then
    echo "Unable to extract package generated by IG builder."
    exit 1
  fi
}

CreateTarFile()
{
  local ERROR=$FALSE

  local tar_filename="${PACKAGE_NAME}.tgz"
  echo "Compressing profile files to package ${tar_filename}"

  echo "Package directory: ${output_path}"
  cd "${output_path}"

  result=`tar -cvzf "${tar_filename}" "package" 2>&1` || ERROR=$TRUE
  if [[ ${ERROR} -eq ${TRUE} ]]
  then
    echo "ERROR: Unable to compress files."
    echo -e "--------------------------- \n${result}\n---------------------------------"
    exit 1
  fi
  echo "files were compressed at ${output_path} to '${tar_filename}'"
}

UpdatePackageFile()
{
  echo "Updating package.json"
  local ERROR=$FALSE

  local package_filename="${package_output_path}/package.json"
  cat "${package_filename}" | jq 'del(.canonical)' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(.title)' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(.type)' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(.url)' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(."tools-version")' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(."date")' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(.license)' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(."notForPublication")' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(.dependencies."hl7.terminology.r4")' | tee "${package_filename}"  >/dev/null
  cat "${package_filename}" | jq 'del(.dependencies."hl7.fhir.uv.extensions.r4")' | tee "${package_filename}"  >/dev/null
  cat "${package_filename}" | jq  '.name="iknl.fhir.nl.r4.ncr-ehr"' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq '. += {jurisdiction : "urn:iso:std:iso:3166#NL"}' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq  '.description="FHIR R4 profiles for the electronic health record (EHR) submissions to the Netherlands Cancer Registry (NCR)"' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(."directories")' | tee "${package_filename}" >/dev/null
  cat "${package_filename}" | jq 'del(."maintainers")' | tee "${package_filename}" >/dev/null
}

for arg in "$@";
do
  name="${arg/=*/}"
  value="${arg/${name}=/}"
  case "${name}" in
    --package-name)
      [[ "${value}" == "${name}" ]] && echo "No package name provided"
      PACKAGE_NAME="${value}"
      ;;
 esac
done

[[ "${PACKAGE_NAME}" == "" ]] && echo "No package name was provided, use '--package-name' as an argument to specify a package name" && exit 1
[[ ! -d "${ig_builder_output_path}" ]] && echo "IG output path ${ig_builder_output_path} does not exist" && exit 1
[[ ! $(ls -A ${ig_builder_output_path}) ]] && echo "IG Output directory is empty" && exit 1

output_path="${package_path}/output/${PACKAGE_NAME}"
package_output_path="${output_path}/package"
example_output_path="${package_output_path}/examples"

PrepareDirectories
UnpackTarFile
CopyProfileFiles
CopyExampleFiles
UpdatePackageFile
CreateTarFile

echo "Done."